# Project configuration
# pyproject.toml
# Python project configuration for Australian Financial RAG System

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "australian-financial-rag"
version = "1.0.0"
description = "RAG system for Australian financial investment planning with precious metals integration"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Australian Financial RAG Team", email = "contact@australian-financial-rag.com"}
]
maintainers = [
    {name = "Australian Financial RAG Team", email = "contact@australian-financial-rag.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Scientific/Engineering :: Artificial Intelligence"
]
keywords = [
    "rag", "retrieval-augmented-generation", "financial-planning", "australia",
    "investment", "superannuation", "precious-metals", "asx", "machine-learning"
]
dependencies = [
    "streamlit>=1.28.0",
    "chromadb>=0.4.18", 
    "sentence-transformers>=2.2.2",
    "transformers>=4.35.0",
    "torch>=2.1.0",
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "plotly>=5.17.0",
    "yfinance>=0.2.22",
    "feedparser>=6.0.10",
    "requests>=2.31.0",
    "beautifulsoup4>=4.12.0",
    "langchain>=0.0.335",
    "pyyaml>=6.0.1",
    "python-dateutil>=2.8.2"
]
requires-python = ">=3.9"

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.9.0",
    "flake8>=6.1.0",
    "mypy>=1.5.0",
    "isort>=5.12.0",
    "pre-commit>=3.4.0"
]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "hypothesis>=6.82.0"
]
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0"
]
evaluation = [
    "ranx>=0.3.18",
    "rouge-score>=0.1.2",
    "bert-score>=0.3.13",
    "datasets>=2.14.0"
]
api = [
    "fastapi>=0.103.0",
    "uvicorn>=0.23.0",
    "pydantic>=2.3.0"
]

[project.urls]
Homepage = "https://github.com/your-username/australian-financial-rag-system"
Documentation = "https://github.com/your-username/australian-financial-rag-system/docs"
Repository = "https://github.com/your-username/australian-financial-rag-system.git"
Issues = "https://github.com/your-username/australian-financial-rag-system/issues"
Changelog = "https://github.com/your-username/australian-financial-rag-system/blob/main/CHANGELOG.md"

[project.scripts]
financial-rag = "src.cli:main"
collect-data = "scripts.collect_data:main"
initialize-rag = "scripts.initialize_rag:main"

[tool.setuptools.packages.find]
where = ["src"]
include = ["*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.txt", "*.md"]

# Black code formatting
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | venv
)/
'''

# isort import sorting
[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
src_paths = ["src", "tests", "scripts"]

# MyPy static type checking
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "streamlit.*",
    "plotly.*",
    "yfinance.*",
    "feedparser.*",
    "chromadb.*",
    "sentence_transformers.*"
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-fail-under=80"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests as API tests",
    "financial: marks tests as financial calculation tests"
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning"
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
    "*/__init__.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]

# Flake8 linting configuration
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501", "E402"]
exclude = [
    ".git",
    "__pycache__",
    "venv",
    ".venv",
    "build",
    "dist",
    ".eggs"
]
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:F401,F811"
]